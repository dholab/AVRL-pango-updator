params {
	
	// WORKFLOW PARAMETERS TO REVIEW AT EACH RUN
	// ----------------------------------------
	// Absolute path to the directory where subdirectories for each
	// sequencing run are stored.
	data_dir = "/Volumes/GoogleDrive/Shared drives/2019-nCoV open research team/Sequencing Data"
	
	// Runs of interest (comma-separated list of specific runs you'd like to analyze)
	runs_of_interest = ""
	
	// Where to place results
	results = "$baseDir/results"
	
	// Path to SARS-CoV-2 annotations
	refgff = "$baseDir/resources/MN9089473.gff3"
	
	// whether to identify (true or false) potential long infections
	identify_long_infections = true
	
	// How many days past lineage designation to consider an infection prolonged
	days_of_infection = 240
	
	// whether to classify into BA.2-based RBD mutation levels
	classify_mutation_levels = true
	
	// whether to update pango to the latest version (true or false)
	update_pango = true
	
	// Docker registry to use. In the past we have used 'dockerreg.chtc.wisc.edu/dabaker3'
	docker_reg = 'nrminor'
	
	// date for docker image tagging
	date = new java.util.Date().format('yy_MM_dd')
	
	
	// WORKFLOW PARAMETERS THAT SHOULD NOT BE CHANGED
	// ----------------------------------------
	// Table specifying when each lineage was first added to pango
	dockerfile_path = "$baseDir/resources/update_pango_docker"
	
}


// WHETHER TO GENERATE A REPORT OF RUN STATISTICS
report {
  enabled = false
  file    = "${params.results}/report.html"
}


// WHETHER TO GENERATE A VISUALIZATION OF THE WORKFLOW
dag {
	enabled = true
	overwrite = true
	file = 'lineager-analyzer-visualization.png'
}


// WHETHER TO REMOVE TEMPORARY FILES AFTER A SUCCESSFUL RUN
cleanup = false


// PROFILE OPTIONS
profiles {
	
	standard {
		
		docker.enabled = true
		singularity.enabled = false
		conda.enabled = false
		
		process {
			
			withName:UPDATE_PANGO_DOCKER {
				// container = "${params.docker_reg}/pangolin_updated:${params.date}"
				container = "staphb/pangolin:latest"
				docker.runOptions = '--pull=always'
			}
			withName:IDENTIFY_LINEAGES {
				// container = "${params.docker_reg}/pangolin_updated:${params.date}"
				container = "staphb/pangolin:latest"
			}
			// withName:GET_LINEAGE_SEQS {
			// 	container = "ibmcom/curl:4.2.0-build.2"
			// }
			// withName:UNZIP_LINEAGE_SEQS {
			// 	container = "biocontainers/zstd:v1.3.8dfsg-3-deb_cv1"
			// }
			withName:ISOLATE_BA_2 {
				container = "r-base:4.2.1"
			}
			withName:MAP_TO_BA_2 {
				container = "staphb/minimap2:2.24"
			}
			withName:PROCESS_WITH_SAMTOOLS {
				container = "staphb/samtools:1.16"
			}
			withName:CALL_RBD_VARIANTS {
				container = "staphb/ivar:1.3.1-titan"
			}
		}
		
	}
	
	docker {
		
		docker.enabled = true
		singularity.enabled = false
		conda.enabled = false
		
		process {
			
			withName:UPDATE_PANGO_DOCKER {
				// container = "${params.docker_reg}/pangolin_updated:${params.date}"
				container = "staphb/pangolin:latest"
				docker.runOptions = '--pull=always'
			}
			withName:IDENTIFY_LINEAGES {
				// container = "${params.docker_reg}/pangolin_updated:${params.date}"
				container = "staphb/pangolin:latest"
			}
			withName:GET_LINEAGE_SEQS {
				container = "ibmcom/curl:4.2.0-build.2"
			}
			withName:UNZIP_LINEAGE_SEQS {
				container = "biocontainers/zstd:v1.3.8dfsg-3-deb_cv1"
			}
			withName:ISOLATE_BA_2 {
				container = "r-base:4.2.1"
			}
			withName:MAP_TO_BA_2 {
				container = "staphb/minimap2:2.24"
			}
			withName:PROCESS_WITH_SAMTOOLS {
				container = "staphb/samtools:1.16"
			}
			withName:CALL_RBD_VARIANTS {
				container = "staphb/ivar:1.3.1-titan"
			}
		}
		
	}
	
	singularity {
		
		singularity.enabled = true
		docker.enabled = false
		conda.enabled = false
		
		process {
			
			withName:UPDATE_PANGO_DOCKER {
				// container = "${params.docker_reg}/pangolin_updated:${params.date}"
				container = "staphb/pangolin:latest"
				docker.runOptions = '--pull=always'
			}
			withName:IDENTIFY_LINEAGES {
				// container = "${params.docker_reg}/pangolin_updated:${params.date}"
				container = "staphb/pangolin:latest"
			}
			withName:GET_LINEAGE_SEQS {
				container = "ibmcom/curl:4.2.0-build.2"
			}
			withName:UNZIP_LINEAGE_SEQS {
				container = "biocontainers/zstd:v1.3.8dfsg-3-deb_cv1"
			}
			withName:ISOLATE_BA_2 {
				container = "r-base:4.2.1"
			}
			withName:MAP_TO_BA_2 {
				container = "staphb/minimap2:2.24"
			}
			withName:PROCESS_WITH_SAMTOOLS {
				container = "staphb/samtools:1.16"
			}
			withName:CALL_RBD_VARIANTS {
				container = "staphb/ivar:1.3.1-titan"
			}
		}
		
	}
	
	conda {
		
		conda {
			enabled = true
			cacheDir = "$baseDir/config/envs"
			createOptions = "-y -c conda-forge -c bioconda -c r"
			useMamba = true
		}
		
		singularity.enabled = false
		docker.enabled = false
		
		process {
			
			withName:UPDATE_PANGO_CONDA {
				conda = "pangolin"
			}
			withName:IDENTIFY_LINEAGES {
				conda = "pangolin"
			}
			withName:UNZIP_LINEAGE_SEQS {
				conda = "conda-forge::zstd=1.5.2"
			}
			withName:MAP_TO_BA_2 {
				conda = "minimap2=2.24"
			}
			withName:PROCESS_WITH_SAMTOOLS {
				conda = "samtools=1.16.1"
			}
			withName:CALL_RBD_VARIANTS {
				conda = "bioconda::ivar=1.3.1"
			}
			
		}
		
	}
}


// MANIFEST
manifest {
	homePage = 'https://github.com/dholab/AVRL-pango-updator'
	mainScript = 'main.nf'
	defaultBranch = 'main'
	description = 'Workflow for updating and extending Pangolin results'
	author = 'Nicholas R. Minor'
}
